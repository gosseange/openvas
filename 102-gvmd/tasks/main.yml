---

- name: Charger les variables d'environnement depuis /etc/profile.d/openvas_env.sh
  shell: |
    bash -c 'source /etc/profile.d/openvas_env.sh && echo "GVMD_VERSION=$GVM_LIBS_VERSION;SOURCE_DIR=$SOURCE_DIR;BUILD_DIR=$BUILD_DIR;INSTALL_DIR=$INSTALL_DIR;INSTALL_PREFIX=$INSTALL_PREFIX"'
  register: env_vars_output
  changed_when: false

- name: Vérifier que les variables ont été chargées
  debug:
    msg: "{{ env_vars_output.stdout }}"

- name: Définir les variables d'environnement comme facts
  set_fact:
    build_dir: "{{ env_vars_output.stdout | regex_search('BUILD_DIR=([^;]+)', '\\1') | first }}"
    install_dir: "{{ env_vars_output.stdout | regex_search('INSTALL_DIR=([^;]+)', '\\1') | first }}"
    install_prefix: "{{ env_vars_output.stdout | regex_search('INSTALL_PREFIX=([^;]+)', '\\1') | first }}"


- name: Attendre que le verrou APT soit libéré
  shell: |
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
      echo "En attente de la libération du verrou APT..."
      sleep 5
    done
  changed_when: false

      
- name: Installer les dépendances pour gvmd
  apt:
    name:
      - libbsd-dev
      - libcjson-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libgpgme-dev
      - libical-dev
      - libpq-dev
      - postgresql-server-dev-all
      - rsync
      - xsltproc
      - dpkg
      - xmltoman
      - fakeroot
      - gnupg
      - gnutls-bin
      - nsis
      - openssh-client
      - python3-lxml
      - rpm 
      - smbclient 
      - snmp 
      - socat 
      - sshpass 
      - texlive-fonts-recommended 
      - texlive-latex-extra 
      - wget 
      - xmlstarlet 
      - zip 
    state: present
    update_cache: yes
  become: yes

- name: Créer le dossier source s'il n'existe pas
  file:
    path: "{{ source_dir }}"
    state: directory

- name: Créer le dossier build pour gvmd
  file:
    path: "{{ build_dir }}/gvmd"
    state: directory

- name: Télécharger l’archive gvmd
  get_url:
    url: "https://github.com/greenbone/gvmd/archive/refs/tags/v{{ gvmd_version }}.tar.gz"
    dest: "{{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz"
    mode: "0644"

- name: Télécharger le fichier de signature gvmd-25.1.1.tar.gz.asc s'il n'existe pas
  ansible.builtin.get_url:
    url: https://github.com/greenbone/gvmd/releases/download/v25.1.1/gvmd-25.1.1.tar.gz.asc
    dest: /opt/source/gvmd-25.1.1.tar.gz.asc
    mode: '0644'
  when: not lookup('ansible.builtin.file', '/opt/source/gvmd-25.1.1.tar.gz.asc', errors='ignore')


- name: Importer la clé GPG de Greenbone
  ansible.builtin.command: >
    gpg --keyserver keyserver.ubuntu.com
        --recv-keys 8AE4BE429B60A59B311C2E739823FAA60ED1E580
  become: true
  environment:
    GNUPGHOME: /root/.gnupg


- name: Vérifier la signature de l’archive
  shell: |
    gpg --verify {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz.asc {{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz
  register: gpg_verify_output
  failed_when: "'Good signature' not in gpg_verify_output.stderr"
  changed_when: false

- name: Extraire les sources de gvmd
  unarchive:
    src: "{{ source_dir }}/gvmd-{{ gvmd_version }}.tar.gz"
    dest: "{{ source_dir }}"
    remote_src: yes
    creates: "{{ source_dir }}/gvmd-{{ gvmd_version }}"

- name: Configurer gvmd avec CMake
  command: >
    cmake {{ source_dir }}/gvmd-{{ gvmd_version }}
    -DCMAKE_INSTALL_PREFIX={{ install_dir }}
    -DCMAKE_BUILD_TYPE=Release
    -DLOCALSTATEDIR=/var
    -DSYSCONFDIR=/etc
    -DGVM_DATA_DIR=/var
    -DGVM_LOG_DIR=/var/log/gvm
    -DGVMD_RUN_DIR=/run/gvmd
    -DOPENVAS_DEFAULT_SOCKET=/run/ospd/ospd-openvas.sock
    -DGVM_FEED_LOCK_PATH=/var/lib/gvm/feed-update.lock
    -DLOGROTATE_DIR=/etc/logrotate.d
  args:
    chdir: "{{ build_dir }}/gvmd"

- name: Compiler gvmd
  command: cmake --build . -j"{{ ansible_processor_cores | default(2) }}"
  args:
    chdir: "{{ build_dir }}/gvmd"

- name: Installer gvmd directement dans le dossier cible
  command: make install
  args:
    chdir: "{{ build_dir }}/gvmd"
  become: yes

