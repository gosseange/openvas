---

- name: Copier le fichier d’environnement OpenVAS dans /etc/profile.d
  ansible.builtin.copy:
    src: openvas_env.sh
    dest: /etc/profile.d/openvas_env.sh
    owner: root
    group: root
    mode: '0644'

- name: Charger les variables d'environnement depuis /etc/profile.d/openvas_env.sh
  shell: |
    bash -c 'source /etc/profile.d/openvas_env.sh && echo "GVM_LIBS_VERSION=$GVM_LIBS_VERSION;SOURCE_DIR=$SOURCE_DIR;BUILD_DIR=$BUILD_DIR;INSTALL_DIR=$INSTALL_DIR;INSTALL_PREFIX=$INSTALL_PREFIX"'
  register: env_vars_output
  changed_when: false

- name: Vérifier que les variables ont été chargées
  debug:
    msg: "{{ env_vars_output.stdout }}"

- name: Définir les variables d'environnement comme facts
  set_fact:
    build_dir: "{{ env_vars_output.stdout | regex_search('BUILD_DIR=([^;]+)', '\\1') | string }}"
    install_dir: "{{ env_vars_output.stdout | regex_search('INSTALL_DIR=([^;]+)', '\\1') | string }}"
    install_prefix: "{{ env_vars_output.stdout | regex_search('INSTALL_PREFIX=([^;]+)', '\\1') | first }}"

- name: Installer les dépendances pour gvm-libs
  apt:
    name:
      - libcjson-dev
      - cmake
      - build-essential
      - pkg-config
      - libcurl4-gnutls-dev
      - libgcrypt-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libgpgme-dev
      - libhiredis-dev
      - libnet1-dev
      - libpaho-mqtt-dev
      - libpcap-dev
      - libssh-dev
      - libxml2-dev
      - uuid-dev
      - libldap2-dev
      - libradcli-dev
      - doxygen
      - clang-format
      - pkg-config
    state: present
    update_cache: yes
  become: yes

- name: Créer le dossier source s'il n'existe pas
  file:
    path: "{{ source_dir }}"
    state: directory

- name: Créer le dossier build pour gvm-libs
  file:
    path: "{{ build_dir }}/gvm-libs"
    state: directory

- name: Télécharger l’archive gvm-libs
  get_url:
    url: "https://github.com/greenbone/gvm-libs/archive/refs/tags/v{{ gvm_libs_version }}.tar.gz"
    dest: "{{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz"
    mode: "0644"

- name: Extraire les sources de gvm-libs
  unarchive:
    src: "{{ source_dir }}/gvm-libs-{{ gvm_libs_version }}.tar.gz"
    dest: "{{ source_dir }}"
    remote_src: yes
    creates: "{{ source_dir }}/gvm-libs-{{ gvm_libs_version }}"

- name: Configurer gvm-libs avec CMake
  command: >
    cmake {{ source_dir }}/gvm-libs-{{ gvm_libs_version }}
    -DCMAKE_INSTALL_PREFIX={{ install_prefix }}
    -DCMAKE_BUILD_TYPE=Release
    -DBUILD_SHARED_LIBS=ON #Assure que les bibliotheques partagées sont activées pour générer les fichiers .pc
  args:
    chdir: "{{ build_dir }}/gvm-libs"
  environment:
    PKG_CONFIG_PATH: "{{install_prefix | join('') }}/lib/pkgconfig"

- name: Vérifier la valeur de install_prefix
  debug:
    msg: "Valeur de install_prefix : {{ install_prefix }}"

- name: Compiler gvm-libs
  command: make -j"{{ ansible_processor_cores | default(2) }}"
  args:
    chdir: "{{ build_dir }}/gvm-libs"

- name: Installer gvm-libs
  command: make install
  args:
    chdir: "{{ build_dir }}/gvm-libs"

- name: Vérifier si le fichier libgvm_base.pc a été installé
  find:
    paths: "{{ install_prefix | string }}/lib/pkgconfig"
    patterns: "libgvm_base.pc"
  register: pc_check

- name: Afficher le résultat
  debug:
    msg: "Fichier libgvm_base.pc trouvé : {{ pc_check.files | length > 0 }}"
